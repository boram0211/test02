< gitlab 사용 가이드 >

1. gitlab(https://gitlab.dbroscreative.com/) 접속 > 로그인 (id: ###@groupidd.com / pw: ###)

-----------------------------------------------------------------------------------------------------------------------

=> 새로운 프로젝트 생성하기*

(1) 상단 우측에서 "+"(New Project) 생성한다.
(2) 프로젝트에 대한 내용 기입 후 Create project
(3) 로컬(본인의 컴퓨터)에서 프로젝트를 다운 받고자하는 폴더에서 git bash 창 열기 (오른쪽 마우스 > git bash)
(4) git bash 명령창에 gitlab 페이지의 Create project를 하고 난 다음 노출 된 페이지에 있는 Create Repository의 내용 순서대로 기입(또는 복붙)한다.
(5) gitlab 페이지를 새로고침 하면 로컬에서 만든 폴더(또는 파일)가 gitlab에 올라간 것 확인한다.

> 처음 git을 사용할 경우 또는 mac의 terminal이 아닌 window의 git bash의 경우 아이디와 비밀번호 입력창을 나올 수 있다. (maybe.. 할때마다..ㅎㅎ)

-----------------------------------------------------------------------------------------------------------------------

=> 만들어진 프로젝트 내려받기(복제 또는 clone)*

(1) git clone [HTTPS] : git의 HTTPS 주소에 있는 데이터를 복제하여 로컬에 내려받아라.
	> [HTTPS]는 gitlab의 해당 프로젝트의 페이지 우측 상단에 있음(SSH | HTTPS : https://gitlab.dbroscreative.com/~~)

-----------------------------------------------------------------------------------------------------------------------

=> 변경된 파일(또는 폴더) git에 올리기 - 주요 명령어*

(1) git pull : git 서버에 있는 데이터들과 비교하여 내 로컬의 데이터를 업데이트 해줘라.
	> git pull은 수시로 해줘야 한다. 수시로 해주지 않을 시, 서버와 로컬의 데이터가 충돌의 위험에 노출될 가능성이 높아진다.
	> 작업 시작 전과 변경된(새로운) 데이터를 git에 올리고자 할때는 필수!
(2) git state : 지금 현재 내 로컬과 서버를 비교하여 변경된 파일을 보여줘라.
(3) git add [file name or folder name] : 해당 폴더를 stage에 올려라.
	> stage란? git 서버에 적용하기 전에 적용하고자하는 파일을 취합하는 장소
	> 선택하지 않고 변경된 모든 파일을 올리고자 할때 : "git add ."을 하여 "."(All data)라는 뜻으로 모든 파일을 stage에 취합할수 있다.
(4) git commit -m "[작업한 내용 코멘트]" : commit을 하기 전 작업한 내용에 대한 코멘트를 남겨 commit 한다.
	> 추후 유지보수와 충돌이 될때 리셋을 할때, 해당 작업 내역을 쉽게 이해할 수 있도록 간결/자세히 작성하길 바란다.
(6) git push : 대기하고 있는 데이터들을 git 서버에 올려라(적용해라).

-----------------------------------------------------------------------------------------------------------------------

=> 충돌 또는 이전으로 되돌리기*

(1) git log : 최근 작업한 히스토리의 일부분을 보여줘라.
	> git log -[number] : 해당 숫자만큼의 최근 히스토리를 보여줘라.
(2) git reset [commit history ad] : 해당 히스토리로 유연하게 리셋해줘라.(maybe.. 내가 로컬에서 작업한 내용을 제외한 나머지부분만 적용될 듯..ㅎㅎ)
	> 예시 : git reset 40ddf7fe88deeb4e7130af6858130d7cc167b7b3
	> git reset [commit history ad] --hard : '--hard'는 강제적으로 모든 데이터가 선언한 히스토리에 맞게 변경해준다.
	> git reset HEAD : 전체 프로젝트를 서버와 맞게 유연하게 리셋해줘라.
	> git reset HEAD --hard : 전체 프로젝트를 서버와 맞게 강제로 리셋해줘라.
	> git reset HEAD [file name] : 선언한 파일만 서버와 같게 리셋해줘라.

-----------------------------------------------------------------------------------------------------------------------

=> 결론!!! 이것만 하면 됩니당!!!

(맨 처음 한번만!)
> git clone [url]

*... 작업 시작! 이제 아래만 반복 하시면 됩니당! 충돌시 불러주세요! :-D ...*
> git pull
(.. 작업 ..)
> git pull
> git add .
> git commit -m "메시지 적기"
> git push
